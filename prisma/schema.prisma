// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  username String @unique
  password String
  profile Profile?

  role RoleEnum @default(CUSTOMER)

  category Category[]
  product Product[]

  cart Cart?
  order Order[]

  messages Message[]
  chatRooms ChatRoom[] @relation("userRooms")

  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt

  @@map("user")
}

model ChatRoom {
  id Int @id @default(autoincrement())
  name String @unique
  users User[] @relation("userRooms")
  messages Message[]

  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt
  @@map("chatRoom")
}

model Message {
  id Int @id @default(autoincrement())
  content String

  user User @relation(fields: [userId], references: [id])
  userId Int

  chatRoom  ChatRoom  @relation(fields: [roomId], references: [id])
  roomId Int
  
  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt
  @@map("message")
}

model Profile {
  id Int @id @default(autoincrement())
  fullName String
  profilePhoto String?
  phone String?
  gender GenderEnum?
  address String?

  user User @relation(fields: [userId], references: [id])
  userId Int @unique

  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt

  @@map("profile")
}

enum GenderEnum {
  Male
  Female
}

model Cart {
  id Int @id @default(autoincrement())
  cartItem CartItem[]
  user User @relation(fields: [userId], references: [id])
  userId Int @unique
  totalPrice Int @default(0)

  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt

  @@map("cart") 
}

model CartItem {
  id Int @id @default(autoincrement())
  cart Cart @relation(fields: [cartId], references: [id])
  cartId Int
  product Product @relation(fields: [productId], references: [id])
  productId Int

  quantity Int
  totalPrice Int @default(0)
  
  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt
}

enum RoleEnum {
  ADMIN
  CUSTOMER
}


model Order {
  id Int @id @default(autoincrement())
  orderId String?
  status OrderStatusEnum @default(PENDING)
  transactionToken String?
  totalPrice Int @default(0)

  orderItems OrderItem[]

  user User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt

  @@map("transaction")
}

enum OrderStatusEnum {
  PENDING
  DELIVER
  COMPLETED
  CANCELLED
} 

model OrderItem {
  id Int @id @default(autoincrement())
  order Order @relation(fields: [orderId], references: [id])
  orderId Int

  product Product @relation(fields: [productId], references: [id])
  productId Int
  quantity Int
  totalPrice Int @default(0)
  
  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt
}

model Category {
  id Int @id @default(autoincrement())
  categoryName String

  user User @relation(fields: [userId], references: [id])
  userId Int

  product Product[]

  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt

  @@map("category")
}

model Product {
  id Int @id @default(autoincrement())
  productName String
  description String
  price Int @default(0)
  quantity Int
  productImage ProductImage[] 

  user User @relation(fields: [userId], references: [id])
  userId Int

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int 
  
  cart CartItem[]
  order OrderItem[]

  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt
  @@map("product")
}

model ProductImage{
  id Int @id @default(autoincrement())
  url String
  productId Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

